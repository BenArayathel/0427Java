
Before VM:
	Have all your apps running on a single server machine. Difficult to manage how much resource an app might take, causing other 
	apps to undderperform. Can resolve it by putting each application on a seperate system, can be expensive and difficult to scale. 

Virtual Machine:
	VM's virtualize at the hardware level, emulates a physical machine and can be treated as such. On a single system, you can have multiple isolated 
	VMs running. VMs are isolated, so if a VM fails, other VM should not be affected. VMs are effectively isolated systems to play with (we can deploy, 
	test and deliver), each VM comes with it's own OS, libraries and applications. VMs are managed using Hypervisors.

Container:
	VMs can be viewed as hardware virtualization, containers are OS virtualisation. Each container will share the same OS kernel as its host. Container's 
	don't offer the same level of isolation as VMs. The advantages are 
	>Much smaller in size than VMs, megabytes compared to gigabytes. Allows much quicker bott ups. 
	>Much more portable than VMs because container's share the same OS (Seperate OS system images can cause overhead in memory)
	>There is less management overhead due to contaers sharing the same OS
	Containers are managed using Cotnainer engine (Docker). 

Docker:
	Docker container:
		Is where the docker image will actually be running. 

	Docker image:
		A template for how to run a container. There are pre-made docker images on docker hub for easy start yp, e.g. 8-jdk-alpine. 

	Docker file:
		Include the necessary information to configre and build a dokcer image. Images can also be crated using the interactive method. 

	Docker file -> Docker image - >Docker container 

	Docker compose:
		Is a tool for defining and running applications with multiple docker containers. Uses a YAML file to configre applciation's services, which 
		then allow you to launch multiple containers. 

		Define Dockerfile -> Define the service that make up your app in docker-compse.yml - > CLI "docker-compose up"

	Docker registry:
		Stores and distributes Docker iamgs, stateless and scalable. 

	Benefits of Docker:
	1) Reproducibility/Distribution: All images built from the same Docekrfile will behave identically. Easy to distrbute within your organisation. 
	2) Isolation: Seperate containers will avoid dependencies or plugincs conflicting with each other. 
	3) Security: If one container is comprimised, the other will remain unaffected. 
	4) Docker Hub: Contains a lot of premade images, which makes life easier. 
	5) Environment Maangemennt: Isolated containers allow you do testing, development and production on the same server. 
	6) Continous Integration: Designed to work well as part of continous integration pripelines with Jenkins. 

	Disadvantages:
	1) Increased overhead: Communication and managing multiple contianer ain't easy, better have a sysadmin. 
	2) Decreased oerformance: Processses will run quicker on native OS compared to within containers. 
	3) Multiple operating system: Docker containers share the same OS as the host, VMs are needed if you want to use seperate OS. 
	4) Security: Container are isolated, but the OS is shared. If the OS is comprimised, all container will be affected. 


Creating a Docker Image and running the container.

	Create a Maven/Spring project 
	Maven build the project, use "clean compile install", A JAR file should be now created under your 'target' folder
	Inside Project, create a file "DockerFile" in the root folder 
		Inside the file insert:
				FROM openjdk:8-jdk-alpine
				VOLUME /tmp
				ADD target/demo-0.0.1-SNAPSHOT.jar app.jar
				ENTRYPOINT ["java","-jar", "/app.jar"]
	
	https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index
	FROM: We're using an image built around JDK 8 
	VOLUME: Before a device can utilise a storage device, the OS has to make it accessible through the device's file system. VOLUME mounts 
		a directory inside of our container, can also be used to mount host directory inside the container. Enabling file sharing. 
		https://blog.container-solutions.com/understanding-volumes-docker
	ADD: Copies new files from directory, in this case our jar application. We map our jar file to "app.jar"
	ENTRYPOINT: Gives docker the commandline arguments necessary for the applciation (java -jar -<jar file name>)
	
	


	Navigate to the Project, with the DockerFile (Can be done by selecting properties of the file) 
	
	Command Line:
		1) docker -v : checks whether Docker is installed and what version it is. 
		2) Switch to project space using: cd <project-space> || Alternatively use docker build -f /path/Dockerfile
		2) docker build -t <tagname> : Creates a docker image, with -t used to give the image a name
		3) docker run -p<host port>:<docker port> <image name> : Run docker image in a container, using -p to specify mapping 
			from host port to docker port
		4) docker container stop <container name> : Stops container running 
		5) docker container start <container name> : Starts Docker container

		Extra) 	Docker ps : Returns all the dockers running
		        Docker ps -a: Returns all docker containers runnning or not running
			Docker image ls : Returns all docker images (the ones created by 2) 