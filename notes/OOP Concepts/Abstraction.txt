OOP Concepts 

	Abstraction:
		The concept of hiding implementation to show functionality.
		IRL , this is similar to turning on a car; we don't need 
		to know how the the engine creates combustion, we just 
		turn our keys or press a button. 

		In Java we use Abstract classes and interfaces to implement 
		abstraction (partial and complete absttraction).

		Abstract Class:
			A method with at least one abstract method (does not 
			have a method body) that also allows concrete methods.
			
			Cannot be instantiated, a child class has to extend it
			and implement the abstract method. 

			Child class must implement all the methods or it will 
			also be defined as an abstract class. 

			Cannot be static or final.

			Otherwise it's identical to class, (e.g. can't inherit
			multiple abstract classes)

			Syntax:
				abstract class myExample{
					String value;
					
					abstract void func();
				}

		Interface:
			Cannot have any concrete methods (all abstract methods)

			Methods are by default abstract and public

			variable is by default defined as public, static and 
			final.
	
			An interface cannot contain a constructor

			A class can implement multiple interfaces

			Syntax:
				public interface Example {
	
					public static final double pi = 3.14;
					String greeting = "welcome"; //By default variables have the modifier public static final
	
					void Withdrawal();
	
					public abstract void Deposit(); // By default methods in interfaces have the modifier public and abstract
	
					class ExampleImpl implements Example{
		
						double pi = 4.0;

						@Override
						public void Withdrawal() {
							System.out.println("We're in Withdrawal");
			
						}

						@Override
						public void Deposit() {
							System.out.println("We're in Deposit");
			
						}
		
					}	
	
					public static void main(String[] args) {
			     	//		Example stuff = new Example(); Interfaces cannot have constructors
						Example stuff = new ExampleImpl();
						stuff.Withdrawal();
						stuff.Deposit();
		
			     	//		Example.greeting = "Goodbye" This will return an error because it's final
						ExampleImpl mystuff = new ExampleImpl();
						mystuff.pi = 4;
						System.out.println("Object :" + mystuff.pi);
						System.out.println("Interface :" + Example.pi);
					}

				}
		