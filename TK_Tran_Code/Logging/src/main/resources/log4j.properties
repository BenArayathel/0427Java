# log4j Features
    # It is thread-safe.
    # It is optimized for speed.
    # It is based on a named logger hierarchy.
    # It supports multiple output appenders per logger.
    # It supports internationalization.
    # It is not restricted to a predefined set of facilities.
    # Logging behavior can be set at runtime using a configuration file.
    # It is designed to handle Java Exceptions from the start.
    # It uses multiple levels, namely ALL, TRACE, DEBUG, INFO, WARN, ERROR and FATAL.
    # The format of the log output can be easily changed by extending the Layout class.
    # The target of the log output as well as the writing strategy can be altered by implementations of the Appender interface.
    # It is fail-stop. However, although it certainly strives to ensure delivery, log4j does not guarantee that each log statement will be delivered to its destination.

# log4j.properties is configuration file; by default, the LogManager looks for this file name in the CLASSPATH.

# Loggers; responsible for capturing logging information
log4j.rootLogger=debug, file

# Appenders; responsible for printing logging information to various preferred destinations.
# Redirects log messages to console (System.out) via ConsoleAppender
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
# Redirects log messages to a log file; support file rolling via RollingFileAppender.
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=C:\\Users\\TK\\MyLoggingPlace\\log4j-application.log
log4j.appender.file.MaxFileSize=5MB
log4j.appender.file.MaxBackupIndex=10
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
