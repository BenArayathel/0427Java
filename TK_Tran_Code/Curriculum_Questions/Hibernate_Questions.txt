Explain importance of Hibernate F/w
	Reduces lines of code by maintaining object-table mappings itself and returns results to an application in the form of Java objects.
JPA Vs Hibernate
	JPA (Java Persistence API) is a specification; Hibernate implements this specification.
	I.e. JPA is the dance, Hibernate is the dancer.
jdbc vs hibernate
	JDBC is an API used to communicate with the database.
	Hibernate is an ORM which is used to map POJOs to corresponding relational database tables.
builder pattern in hibernate
	An object-construction pattern that suggests moving the construction logic out of the object class to a separate class (the builder class).
factory pattern in hibernate
	A creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object.
	Done by creating objects by calling a "factory method":
		An interface and implemented by child classes or,
		Implemented in a base class and optionally overridden by derived classes
	..rather than by calling a constructor.
fetch strategies in hibernate
	Relationships are defined through JOINS in a DB. Hibernate represents these JOINS in the form of associations (One-to-One, One-to-Many, Many-to-Many).
		It's required to define FetchType when you use any of these associations. FetchType decides on whether or not to load all the data
		belonging to the associations as soon as you fetch data from a parent table.
	FetchType.LAZY - fetches child entities lazily;fetch ONLY WHEN you need it to.
		Improves performance by avoiding unnecessary computation and reduces memory requirements.
	FetchType.EAGER - fetches parent entities along with their children entities; fetch it ALL so you'll have it when you need it.
		More memory consumption and processing speeds are low.
	Pro-tip: All "to-one" relationships use EAGER; all "to-many" relationships use LAZY.
load vs get
	get() returns the object by fetching it from DB whereas load() just returns the reference of an object that MIGHT NOT EXIST.
save vs persist
	save() returns an identifier generated by the DB.
	persist() doesn't return anthing; it's return type is void.
save vs saveorupdate
	save() does an INSERT to store the object into the DB and also returns the identifier generated by the DB.
	saveOrUpdate() can do INSERT or UPDATE depending upon whether the object already exists in the DB or not.
what is HQL?
	Hibernate Query Language; similar in appearance to SQL but is fully object-oriented and understands notions like inheritance, polymorphism, and association.
HQL vs SQL
core interfaces in hibernate
	1. Configuration Interface - used to configure Hibernate; uses a Configuration instance to specify the location of mapping documents.
		Configuration cfg = new Configuration();
		cfg.addResource("hello/Message.hbm.xml");
		cfg.setProperties( System.getProperties() );
	2. Transaction Interface - OPTIONAL
		Transaction transaction = session.beginTransaction();
	3. SessionFactory Interface - obtains Session instances from a SessionFactory; lightweight and typically only one instance is created for entire application.
		SessionFactory sessionFactory =cfg.buildSessionFactory();
	4. Session Interface - a persistence manager that manages operations like storing and retrieving objectsl; NOT THREAD SAFE.
		Session session = sessionFactory.openSession();
	5. Query and Criteria Interface - allows you to perform queries against the DB and control how the query is executed.
different states of an object in hibernate
	Transient - an object not associated with a session and does not represent a row in the DB.
		Employee emp = new Employee();
		emp.setName("Ravi Raj");
		// emp object is in a transient state
	Persistent - an object associated wtih a session; when in this state, the object represents one DB row and consists of an identifier value.
		Long id = (Long) session.save(emp);
		// emp object is now in a persistent state
	Detached - an object just removed from a session; it still contains an identity but you can't do persistence operations with that identity.
		session.close();
		//object in detached state
what is n+1 problem with hibernate?
	A performance issue related to persistence.
	Occurs when code needs to load the children of a parent-child relationship (the "many" in "one-to-many").
	Most ORMs have lazy-loading enabled by default, so queries are issued for the parent record, and then one query for EACH child record (INEFFICIENT).
contextual sessions in hibernate
	The mapping of a current Session to a user's context.
L1 Vs L2 cache
	L1 is cache memory built onto the CPU itself.
	L2 is cache memory on a separate chip that can be accessed more quickly than the larger "main" memory.
different inheritance mapping in hibernate
	MappedSuperclass – the parent classes, can't be entities.
	Single Table – the entities from different classes with a common ancestor are placed in a single table.
	Joined Table – each class has its table and querying a subclass entity requires joining the tables.
	Table-Per-Class – all the properties of a class, are in its table, so no join is required.
dirty checking in hibernate
	Hibernate automatically detects whether an object is modified or not and in need of being updated.
	Uses a strategy called "inspection"; when an obj is loaded from DB, a snapshot of it is kept in memory.
	When the session is flushed, Hibernate compares the stored snapshot with the current state.
	If they differ, the object is marked DIRTY and a suitable SQL command is enqueued.
different ways of doing association mapping in hibernate
	One-to-One
	One-to-Many
	Many-to-One
	Many-to-Many
what is ORM
	Programming technique for converting data between relational databases and object-oriented programming languages.
what is OGM
	A persistence engine providing JPA support for NoSQL datastores.
what is hbm2ddl auto?
	A Hibernate configuration file used to validate and export schema DDL to the DB when the SessionFactory is created.
	Possible values for hbm2ddl.AUTO:
		create
		validate
		update
		create-drop
explain hibernate.cfg.xml
	A Hibernate config file that specifies required Hibernate properties.
give annotations used in hibernate
	@Entity - marks a class as an entity bean, so it MUST have a no-args constructor that's visible with at least protected scope.
	@Table - specifies details of the table that'll be used to persist the entity in the DB.
	@Id and @GeneratedValue - Id specifies the primary key; GeneratedValue makes code portable between different databases.
what is dialect
	A property of hibernate.cfg.xml that generates the appropriate SQL "dialect" for the chosen database.
explain need of Criteria and Restrictions  API in hibernate
	Hibernate Criteria API allows you to build up a criteria query object programmatically; the org.hibernate.Criteria interface defines available methods.
	Hibernate Criteria - using Restrictions allows selective retrieval of objects.
		E.g retrieve only products with a price over $30.