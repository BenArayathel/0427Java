04/29/20
Wrapper Classes wrap around primitive data types.
Turns primitives into Objects:
	boolean > Boolean
	int > Integer
	char > Character
	byte > Byte
	short > Short
	long > Long
	double > Double
Why?
	Objects have methods assocaited with them.
	Data structures like the Collection API.

	Primitives are still faster than wrappers.
	Only use wrapper when a method needs to accept an Object.
Recall:
	Everything within Main(), will go onto the stack for execution.
	Everything instance-level will go onto the heap.

String
	An object that contains an array of characters.
	Allows creation and manipulation of strings (notice lowercase).
	Immutable: Strings can't be changed.
	Final: The class cannot be extended.
	String objects are stored on heap, but String Literals are stored in String pool, 
		which itself is within heap memory.

StringBuilder
	Mutable, more efficient (faster) than StringBuffer.

StringBuffer
	Also mutable, but thread safe/synchronized.
	Lower efficiency (slower) than StringBuffer; it's gotta wait for other threads before continuing.

RegEx (Regular Expression)
	An expression commonly used across programming languages; minor syntax changes.
	PMA - Pattern Matching Algorithm
	[] - expression
	{} - length
	^ - not
	? - 
	. - 
	* - 
	() - 
	Examples:
		[a-z]{5} - "any lowercase letter of length 5"
		[0-9]{1,} - "at least 1 digit and max can be any"
		[a-zA-Z0-9]{10} = "any alphanumeric word of length 10"
		[^a-zA-Z0-9] - "apart from alphanumeric" (anything except alphanumeric)

Exceptions
	Exception: anything disrupting the flow of an application.
	Exception-handling determines the quality of an application.

	Separations of Concerns Normal Workflow
	Client/Users/Apps >
		Tier 1: Presentation Layer
			Logic
			Accepts user input
		Tier 2: Business/Application Layer
			Logic
			Checks and validates user input
			Pre-filter, preliminary checks before consulting DB
		Tier 3: Persistance/DB Layer
			Logic
			Interacts with database
	> Database, SQL, NoSQL, PL/SQL

	Object >
		Throwable (all exceptions throwable) >
			Exception (Checked Exception) >
			- SQLException
			- ClassNotFoundException
			- ParseException
			- IOException
				RuntimeException (Unchecked Exceptions), compiler forces dev to handle it
				- ArithmeticException (DivideByZero)
				- IndexOutOfBoundsException
				- ConcurrentModificationException
	
	try..catch..finally
		try - suspected code that might throw an exception
		catch - handler of exception
		finally - last block; runs regardless of whether exception was handled or not
	throws
		Tosses exception back to previous layer
	throw
		Explicitly create an exception with my own message

	When an exception thrown at runtime, JVM creates exception Object with a predefined message.
		Then, it checks if the dev has handled it.

Serialization
    For an object to be serializable:
        It must implement the Serializable interface.
        All vars in class must be serializable; mark transient if you don't want it to be.
    When implementing Serializable, must generate a seriazable ID.
    ObjectOutStream used to serialize an object.
        FileOutputStream used for writing byte data to a File.
        For writing character streams, use FileWriter.
    ObjectInputStream used to deserialize an objectm.
        FileInputStream used for reading byte data from a File.
        For reading character streams, use FileReader.
        
Collections Framework
	Gives devs access to prepackaged data structures and algorithms for manipulating them.
	All collections derive from util package.
	ONLY ACCEPTS OBJECTS.
	CRUD: Create, Read, Update, Delete
		Arrays are slow; must iterate through entire thing to CRUD.
		Easier in collections, no need to iterate through.
	Dynamic and Resizeable
		Memory increase/decrease based on elements added/removed.
	All collections by default iterable.
	Helps us design data structures in an easier way
		Queue, Dequeue, Map, Set, List.

	Collection is the root for all data structures
	Collections is a utility class (helper class) that contains methods like sort(), shuffle(), binarySearch(), reverse().
